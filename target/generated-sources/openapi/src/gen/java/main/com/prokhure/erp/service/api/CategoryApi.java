/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokhure.erp.service.api;

import com.prokhure.erp.service.model.CategoryListResponseDto;
import com.prokhure.erp.service.model.CategoryRequestDto;
import com.prokhure.erp.service.model.CategoryResponseDto;
import java.util.Date;
import org.springframework.format.annotation.DateTimeFormat;
import com.prokhure.erp.service.model.Errors;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-24T19:59:54.291948+01:00[Africa/Lagos]")
@Validated
@Tag(name = "category", description = "the category API")
public interface CategoryApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /category : Add category
     * Add a new category
     *
     * @param categoryRequestDto Create a category (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or user not found (status code 404)
     *         or user not found (status code 403)
     *         or Validation exception (status code 422)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "addCategory",
        summary = "Add category",
        description = "Add a new category",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "404", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "403", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "422", description = "Validation exception", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/category",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CategoryResponseDto> addCategory(
        @Parameter(name = "CategoryRequestDto", description = "Create a category", required = true) @Valid @RequestBody CategoryRequestDto categoryRequestDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"dateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"name\" : \"name\", \"description\" : \"description\", \"parentCategory\" : \"parentCategory\", \"categoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"dateUpdated\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"status\" }, \"description\" : \"successful\", \"status\" : \"00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /category/{categoryId} : Get all categories
     * Get category by Id
     *
     * @param categoryId ID of the category that needs to be retreived (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or user not found (status code 404)
     *         or user not found (status code 403)
     *         or Validation exception (status code 422)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getCategoryById",
        summary = "Get all categories",
        description = "Get category by Id",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "404", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "403", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "422", description = "Validation exception", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/category/{categoryId}",
        produces = { "application/json" }
    )
    default ResponseEntity<CategoryResponseDto> getCategoryById(
        @Parameter(name = "categoryId", description = "ID of the category that needs to be retreived", required = true, in = ParameterIn.PATH) @PathVariable("categoryId") UUID categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"dateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"name\" : \"name\", \"description\" : \"description\", \"parentCategory\" : \"parentCategory\", \"categoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"dateUpdated\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"status\" }, \"description\" : \"successful\", \"status\" : \"00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /category : Get all categories in the system
     * get categories paginated by status or date created
     *
     * @param page page number (required)
     * @param pageSize page size (required)
     * @param status The category status (optional)
     * @param dateCreated Date category was created (optional)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or user not found (status code 404)
     *         or user not found (status code 403)
     *         or Validation exception (status code 422)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "listCategories",
        summary = "Get all categories in the system",
        description = "get categories paginated by status or date created",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryListResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "404", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "403", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "422", description = "Validation exception", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/category",
        produces = { "application/json" }
    )
    default ResponseEntity<CategoryListResponseDto> listCategories(
        @NotNull @Parameter(name = "page", description = "page number", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = true) Integer page,
        @NotNull @Parameter(name = "pageSize", description = "page size", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = true) Integer pageSize,
        @Parameter(name = "status", description = "The category status", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) String status,
        @Parameter(name = "dateCreated", description = "Date category was created", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dateCreated", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) Date dateCreated
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"pageInfo\" : { \"totalItems\" : 0, \"totalPages\" : 6 }, \"categories\" : [ { \"dateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"name\" : \"name\", \"description\" : \"description\", \"parentCategory\" : \"parentCategory\", \"categoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"dateUpdated\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"status\" }, { \"dateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"name\" : \"name\", \"description\" : \"description\", \"parentCategory\" : \"parentCategory\", \"categoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"dateUpdated\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"status\" } ] }, \"description\" : \"successful\", \"status\" : \"00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /category : Update Category
     * update category
     *
     * @param categoryRequestDto Update category (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or user not found (status code 404)
     *         or user not found (status code 403)
     *         or Validation exception (status code 422)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "updateCategory",
        summary = "Update Category",
        description = "update category",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "404", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "403", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "422", description = "Validation exception", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/category",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CategoryResponseDto> updateCategory(
        @Parameter(name = "CategoryRequestDto", description = "Update category", required = true) @Valid @RequestBody CategoryRequestDto categoryRequestDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"dateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"name\" : \"name\", \"description\" : \"description\", \"parentCategory\" : \"parentCategory\", \"categoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"dateUpdated\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"status\" }, \"description\" : \"successful\", \"status\" : \"00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /category/{categoryId} : Update category status by category Id
     * update category by Id for each catgory
     *
     * @param categoryId ID of the category that status needs to be toggled (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or user not found (status code 404)
     *         or user not found (status code 403)
     *         or Validation exception (status code 422)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "updateCategoryById",
        summary = "Update category status by category Id",
        description = "update category by Id for each catgory",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "404", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "403", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "422", description = "Validation exception", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/category/{categoryId}",
        produces = { "application/json" }
    )
    default ResponseEntity<CategoryResponseDto> updateCategoryById(
        @Parameter(name = "categoryId", description = "ID of the category that status needs to be toggled", required = true, in = ParameterIn.PATH) @PathVariable("categoryId") UUID categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"dateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"name\" : \"name\", \"description\" : \"description\", \"parentCategory\" : \"parentCategory\", \"categoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"dateUpdated\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"status\" }, \"description\" : \"successful\", \"status\" : \"00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
