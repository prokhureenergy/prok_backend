/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokhure.erp.service.api;

import com.prokhure.erp.service.model.BankDetailResponse;
import com.prokhure.erp.service.model.BankDetails;
import com.prokhure.erp.service.model.BankRegistration;
import com.prokhure.erp.service.model.Errors;
import com.prokhure.erp.service.model.ResponseDto;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-17T15:58:53.899225+01:00[Africa/Lagos]")
@Validated
@Tag(name = "bank", description = "the bank API")
public interface BankApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /user/bank : Add bank details
     * Add a new bank account
     *
     * @param bankRegistration Create a bank details (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or user not found (status code 404)
     *         or user not found (status code 403)
     *         or Validation exception (status code 422)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "addBank",
        summary = "Add bank details",
        description = "Add a new bank account",
        tags = { "bank" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BankDetailResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "404", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "403", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "422", description = "Validation exception", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/bank",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BankDetailResponse> addBank(
        @Parameter(name = "BankRegistration", description = "Create a bank details", required = true) @Valid @RequestBody BankRegistration bankRegistration
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"bankId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"userBankId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"bankName\" : \"Prokhure bank\", \"partyId\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"description\" : \"successful\", \"status\" : \"00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user/bank/{userBankId} : Delete bank detail by user bank Id
     * delete bank by Id for each user
     *
     * @param userBankId ID of the bank that needs to be deleted (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or user not found (status code 404)
     *         or user not found (status code 403)
     *         or Validation exception (status code 422)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "deleteBankInformation",
        summary = "Delete bank detail by user bank Id",
        description = "delete bank by Id for each user",
        tags = { "bank" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "404", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "403", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "422", description = "Validation exception", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/bank/{userBankId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseDto> deleteBankInformation(
        @Parameter(name = "userBankId", description = "ID of the bank that needs to be deleted", required = true, in = ParameterIn.PATH) @PathVariable("userBankId") UUID userBankId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"partyId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"message\" : \"we have sent a token to xyz@mail.com\" }, \"description\" : \"successful\", \"status\" : \"00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /bank : Get all banks
     * Get all banks
     *
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or user not found (status code 404)
     *         or user not found (status code 403)
     *         or Validation exception (status code 422)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getBanks",
        summary = "Get all banks",
        description = "Get all banks",
        tags = { "bank" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BankDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "404", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "403", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "422", description = "Validation exception", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/bank",
        produces = { "application/json" }
    )
    default ResponseEntity<BankDetails> getBanks(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"bankId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"userBankId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"bankName\" : \"Prokhure bank\", \"partyId\" : \"123e4567-e89b-12d3-a456-426614174000\" }, { \"bankId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"userBankId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"bankName\" : \"Prokhure bank\", \"partyId\" : \"123e4567-e89b-12d3-a456-426614174000\" } ], \"description\" : \"successful\", \"status\" : \"00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/bank/{userBankId} : Get all banks
     * Get all banks
     *
     * @param userBankId ID of the bank that needs to be deleted (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or user not found (status code 404)
     *         or user not found (status code 403)
     *         or Validation exception (status code 422)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getBanksPerUser",
        summary = "Get all banks",
        description = "Get all banks",
        tags = { "bank" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BankDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "404", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "403", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "422", description = "Validation exception", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/bank/{userBankId}",
        produces = { "application/json" }
    )
    default ResponseEntity<BankDetails> getBanksPerUser(
        @Parameter(name = "userBankId", description = "ID of the bank that needs to be deleted", required = true, in = ParameterIn.PATH) @PathVariable("userBankId") UUID userBankId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"bankId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"userBankId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"bankName\" : \"Prokhure bank\", \"partyId\" : \"123e4567-e89b-12d3-a456-426614174000\" }, { \"bankId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"userBankId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"bankName\" : \"Prokhure bank\", \"partyId\" : \"123e4567-e89b-12d3-a456-426614174000\" } ], \"description\" : \"successful\", \"status\" : \"00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /user/bank : Update bank details
     * update a new bank account
     *
     * @param bankRegistration Update bank details (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or user not found (status code 404)
     *         or user not found (status code 403)
     *         or Validation exception (status code 422)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "updateBank",
        summary = "Update bank details",
        description = "update a new bank account",
        tags = { "bank" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BankDetailResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "404", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "403", description = "user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "422", description = "Validation exception", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/user/bank",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BankDetailResponse> updateBank(
        @Parameter(name = "BankRegistration", description = "Update bank details", required = true) @Valid @RequestBody BankRegistration bankRegistration
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"bankId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"userBankId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"bankName\" : \"Prokhure bank\", \"partyId\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"description\" : \"successful\", \"status\" : \"00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
